on: [push]

name: check and deploy

jobs:
  code_checks:
    name: Python code checks
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ['3.8','3.9']

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install pip --upgrade
          pip install poetry
          poetry install --no-dev
          poetry add black
          poetry add flake8
          poetry add isort
          poetry show -v

      - name: Lint with black
        run: |
          POETRY_VENV=$(ls -td /home/runner/.cache/pypoetry/virtualenvs/*/ | head -1)
          source $POETRY_VENV/bin/activate
          black --config pyproject.toml --exclude migrations/ --check .

      - name: Lint with flake8
        run: |
          POETRY_VENV=$(ls -td /home/runner/.cache/pypoetry/virtualenvs/*/ | head -1)
          source $POETRY_VENV/bin/activate
          flake8 .

      - name: Check imports with isort
        run: |
          POETRY_VENV=$(ls -td /home/runner/.cache/pypoetry/virtualenvs/*/ | head -1)
          source $POETRY_VENV/bin/activate
          isort --settings-file pyproject.toml --check -q .

  code_tests:
    runs-on: ubuntu-20.04
    needs: code_checks
    strategy:
      matrix:
        python-version: [ '3.8','3.9' ]

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: fishka-user
          POSTGRES_PASSWORD: fishka-password
          POSTGRES_DB: fishka-database
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install pip --upgrade
          pip install poetry
          poetry install --no-dev
          poetry add pytest pytest-django pytest-cov pytest-pythonpath factory-boy

      - name: Run tests
        run: |
          echo "$DB_HOST"
          POETRY_VENV=$(ls -td /home/runner/.cache/pypoetry/virtualenvs/*/ | head -1)
          source $POETRY_VENV/bin/activate
          pytest -q
        env:
          DB_ENGINE: django.db.backends.postgresql_psycopg2
          DB_HOST: localhost
          DB_NAME: fishka-database
          DB_USER: fishka-user
          DB_PASSWORD: fishka-password
          DB_PORT: 5432

  build_container:
    name: Build and publish container
    needs: code_tests
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: adrixop95/fishka-backend:latest,adrixop95/fishka-backend:${{ github.sha }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  scan_container:
    name: Scan latest container
    needs: build_container
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: azure/container-scan@v0
        with:
          image-name: registry.hub.docker.com/adrixop95/fishka-backend:${{ github.sha }}
